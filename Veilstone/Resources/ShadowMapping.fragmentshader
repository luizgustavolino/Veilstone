#version 330 core

// Input
in vec2 UV;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 ShadowCoord;

// Ouput
layout(location = 0) out vec3 color;

// Constant
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform sampler2DShadow shadowMap;

vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

void main(){


	// Light emission properties
	vec3  LightColor = vec3(1,1,1);
	float LightPower = 1.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor  = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor  = vec3(0.2,0.23,0.23) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.01,0.01,0.1);

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0.2 , 0.8 );
	
	// Eye & Reflect
	vec3 E = normalize(EyeDirection_cameraspace);
	vec3 R = reflect(-l,n);
    
	float cosAlpha      = clamp( dot( E,R ), 0, 1);
	float visibility    = 1.0;
	float bias          = clamp((0.005*tan(acos(cosTheta))), 0, 0.01);

	// Sample the shadow 
    visibility -= 0.4 * (1.0 - texture( shadowMap,
                            vec3(ShadowCoord.xy + poissonDisk[2]/700.0,
                            (ShadowCoord.z-bias)/ShadowCoord.w) ));
	
	
	color =  // Ambient
                MaterialAmbientColor +
             // Diffuse
                visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta+
             // Specular
                visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 15);
    
    float fogFactor = ((gl_FragCoord.z * gl_FragCoord.z) / gl_FragCoord.w) / 1500.0;
    fogFactor = clamp(fogFactor, 0 , 1);
    
    color.x += clamp(fogFactor, 0 , 1);
    color.y += clamp(fogFactor, 0 , 1);
    color.z += clamp(fogFactor, 0 , 1);
}
